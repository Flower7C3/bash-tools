#!/usr/bin/env bash

# Map downloader for GeoApify and OpenStreetMap
# Usage: ./map-download [OPTIONS]

set -euo pipefail

# Main function wrapper
main() {
  # Check if common-functions exists
  if [[ ! -f "$(dirname "$0")/common-functions" ]]; then
    echo "Downloading common-functions from GitHub..."
    if ! curl -fsSL https://raw.githubusercontent.com/Flower7C3/bash-tools/master/common-functions -o "$(dirname "$0")/common-functions"; then
      echo "Failed to download common-functions"
      exit 1
    fi
  fi

  # Source common functions
  source "$(dirname "$0")/common-functions"

  # Call the actual main function
  map_main "$@"
}

# Function to display usage
show_usage() {
  log_usage_title '[OPTIONS]'
  echo
  echo 'Download maps from GeoApify or OpenStreetMap'
  echo
  log_header 'Options'
  log_usage_options_line '-p;--provider <PROVIDER>' \
    'Map provider: geoapify, osm (default: %s)' "$DEFAULT_PROVIDER"
  log_usage_options_line '-z;--zoom <ZOOM>' \
    'Map zoom level (default: %s)' "$DEFAULT_ZOOM"
  log_usage_options_line '-t;--type <TYPE>' \
    'Map type: standard, cycle (default: %s)' "$DEFAULT_MAP_TYPE"
  log_usage_options_line '-o;--output <DIR>' \
    'Output directory (default: <u>%s</u>)' "$DEFAULT_OUTPUT_DIR"
  log_usage_options_line '-w;--width <WIDTH>' \
    'Image width for GeoApify (default: %s)' "$DEFAULT_WIDTH"
  log_usage_options_line '--height <HEIGHT>' \
    'Image height for GeoApify (default: %s)' "$DEFAULT_HEIGHT"
  log_usage_options_line '-k;--api-key <KEY>' \
    'API key for GeoApify'
  log_usage_options_line '-c;--center <LAT>,<LNG>' \
    'Center coordinates (for GeoApify)'
  log_usage_options_line '-b;--bounds <W>,<S>,<E>,<N>' \
    "Bounding box coordinates (for OSM)"
  log_usage_options_line '-m;--markers <MARKERS>' \
    'Marker definitions (for GeoApify)'
  log_usage_options_line '-v;--verbose' \
    'Verbose output'
  log_usage_options_line '-d;--debug' \
    'Debug output'
  log_usage_options_line '-h;--help' \
    'Show this help message'
  echo
  log_header 'Examples'
  echo ' OSM map with bounding box'
  log_usage_example_line '--provider osm --bounds "20.2008,49.9817,20.4651,50.0836" --zoom 15'
  echo ' GeoApify map with center point'
  log_usage_example_line '--provider geoapify --center "50.0326,20.0000" --zoom 15 --api-key YOUR_KEY'
  echo ' GeoApify map with markers'
  log_usage_example_line '--provider geoapify --center "50.0326,20.0000" --markers "lonlat:20.0000,50.0326;type:circle;color:red" --api-key YOUR_KEY'
  echo ' OSM cycle map'
  log_usage_example_line '--provider osm --type cycle --bounds "20.2008,49.9817,20.4651,50.0836"'
  exit 0
}

# Default values
DEFAULT_PROVIDER="osm"
DEFAULT_ZOOM=15
DEFAULT_MAP_TYPE="standard"
DEFAULT_OUTPUT_DIR="${HOME}/Pictures"
DEFAULT_WIDTH=800
DEFAULT_HEIGHT=600

# Global variables
provider=""
zoom=$DEFAULT_ZOOM
map_type=$DEFAULT_MAP_TYPE
output_dir=$DEFAULT_OUTPUT_DIR
width=$DEFAULT_WIDTH
height=$DEFAULT_HEIGHT
geo_long_w=""
geo_lat_s=""
geo_long_e=""
geo_lat_n=""
center_lat=""
center_lng=""
api_key=""
markers=""
verbose=0
DEBUG=0

# Function to validate coordinates
validate_coordinates() {
  local _lat="$1"
  local _lng="$2"

  if ! [[ "$_lat" =~ ^-?[0-9]+\.?[0-9]*$ ]] || ! [[ "$_lng" =~ ^-?[0-9]+\.?[0-9]*$ ]]; then
    log_error 'Invalid coordinate format: %s, %s' "$_lat" "$_lng"
    return 1
  fi

  if (($(echo "$_lat < -90 || $_lat > 90" | bc -l))); then
    log_error 'Latitude must be between -90 and 90: %s' "$_lat"
    return 1
  fi

  if (($(echo "$_lng < -180 || $_lng > 180" | bc -l))); then
    log_error 'Longitude must be between -180 and 180: %s' "$_lng"
    return 1
  fi

  return 0
}

# Function to validate bounding box
validate_bounding_box() {
  local _w="$1"
  local _s="$2"
  local _e="$3"
  local _n="$4"

  if ! validate_coordinates "$_s" "$_w" || ! validate_coordinates "$_n" "$_e"; then
    return 1
  fi

  if (($(echo "$_w >= $_e" | bc -l))); then
    log_error 'West coordinate must be less than East coordinate'
    return 1
  fi

  if (($(echo "$_s >= $_n" | bc -l))); then
    log_error 'South coordinate must be less than North coordinate'
    return 1
  fi

  return 0
}

# Function to create output directory
create_output_dir() {
  if [[ ! -d "$output_dir" ]]; then
    log_info 'Creating output directory: <u>%s</u>' "$output_dir"
    mkdir -p "$output_dir"
  fi
}

# Function to download OSM map
download_osm_map() {
  log_info 'Downloading OSM map...'

  # Convert coordinates to tile coordinates
  local _xtile_min _xtile_max _ytile_min _ytile_max

  # Replace comma with dot for bc calculations
  local _geo_long_w_bc="${geo_long_w//,/.}"
  local _geo_lat_s_bc="${geo_lat_s//,/.}"
  local _geo_long_e_bc="${geo_long_e//,/.}"
  local _geo_lat_n_bc="${geo_lat_n//,/.}"

  # Calculate tile coordinates
  xtile_min=$(echo "scale=0; (($_geo_long_w_bc + 180) / 360 * 2^$zoom)" | bc)
  xtile_max=$(echo "scale=0; (($_geo_long_e_bc + 180) / 360 * 2^$zoom)" | bc)
  ytile_min=$(echo "scale=0; ((1 - log(tan($_geo_lat_n_bc * pi() / 180) + 1 / cos($_geo_lat_n_bc * pi() / 180)) / pi()) / 2 * 2^$zoom)" | bc -l)
  ytile_max=$(echo "scale=0; ((1 - log(tan($_geo_lat_s_bc * pi() / 180) + 1 / cos($_geo_lat_s_bc * pi() / 180)) / pi()) / 2 * 2^$zoom)" | bc -l)

  log_debug 'Tile coordinates: x=%s-%s, y=%s-%s' "$xtile_min" "$xtile_max" "$ytile_min" "$ytile_max"

  # Calculate tile amounts
  local _xtile_amount=$((_xtile_max - _xtile_min + 1))
  local _ytile_amount=$((_ytile_max - _ytile_min + 1))
  local _tile_amount=$((_xtile_amount * _ytile_amount))

  log_info 'Downloading %s tiles...' "$_tile_amount"

  # Create temporary directory
  local _temp_dir="/tmp/map_download_$$"
  mkdir -p "$_temp_dir"

  # Download tiles
  local _tile_index=0
  for ((xtile = xtile_min; xtile <= xtile_max; xtile++)); do
    for ((ytile = ytile_min; ytile <= ytile_max; ytile++)); do
      local _url
      local _tile_file="$_temp_dir/tile_${xtile}_${ytile}.png"

      case "$map_type" in
      "standard")
        _url="http://a.tile.openstreetmap.org/$zoom/$xtile/$ytile.png"
        ;;
      "cycle")
        _url="http://a.tile.opencyclemap.org/cycle/$zoom/$xtile/$ytile.png"
        ;;
      *)
        log_error 'Unsupported map type: %s' "$map_type"
        return 1
        ;;
      esac

      local _progress=$((100 * _tile_index / _tile_amount))
      if [[ "$verbose" == "1" ]]; then
        log_info 'Downloading tile %s/%s (%s%%) - %s' "$((_tile_index + 1))" "$_tile_amount" "$_progress" "$_url"
      else
        log_info -r 'Downloading tiles: %d/%d (%d%%)' $((_tile_index + 1)) "$_tile_amount" "$_progress"
      fi

      if ! curl -s "$_url" -o "$_tile_file"; then
        log_warning 'Failed to download tile: %s' "$_url"
      fi

      ((_tile_index++))
    done
  done

  if [[ "$verbose" != "1" ]]; then
    echo # New line after progress indicator
  fi

  # Create final map
  local output_file="$output_dir/osm_map_${zoom}_${geo_long_w//,/_}_${geo_lat_s//,/_}_${geo_long_e//,/_}_${geo_lat_n//,/_}_${map_type}.png"

  log_info 'Creating final map: %s' "$output_file"

  # Combine tiles using ImageMagick
  local temp_files=()
  for ((xtile = xtile_min; xtile <= xtile_max; xtile++)); do
    local row_file="$_temp_dir/row_${xtile}.png"
    local row_files=()

    for ((ytile = ytile_min; ytile <= ytile_max; ytile++)); do
      local tile_file="$_temp_dir/tile_${xtile}_${ytile}.png"
      if [[ -f "$tile_file" ]]; then
        row_files+=("$tile_file")
      fi
    done

    if [[ ${#row_files[@]} -gt 0 ]]; then
      convert "${row_files[@]}" +append "$row_file"
      temp_files+=("$row_file")
    fi
  done

  if [[ ${#temp_files[@]} -gt 0 ]]; then
    convert "${temp_files[@]}" -append "$output_file"
    log_success -s "$output_file" "OSM map saved"
  else
    log_error 'No tiles were successfully downloaded'
    return 1
  fi

  # Cleanup
  rm -rf "$_temp_dir"
}

# Function to download GeoApify map
download_geoapify_map() {
  log_info 'Downloading GeoApify map...'

  if [[ -z "$api_key" ]]; then
    log_error 'API key is required for GeoApify'
    return 1
  fi

  if [[ -z "$center_lat" || -z "$center_lng" ]]; then
    log_error 'Center coordinates are required for GeoApify'
    return 1
  fi

  # Validate coordinates
  if ! validate_coordinates "$center_lat" "$center_lng"; then
    return 1
  fi

  # Create markers parameter
  local markers_param=""
  if [[ -n "$markers" ]]; then
    markers_param="&marker=$(printf '%s' "$markers" | sed 's/#/%23/g')"
  fi

  # Build URL
  local url="https://maps.geoapify.com/v1/staticmap?style=osm-carto&center=lonlat:${center_lng},${center_lat}&zoom=${zoom}&width=${width}&height=${height}&apiKey=${api_key}${markers_param}"

  log_debug 'GeoApify URL: <u>%s</u>' "$url"

  # Create output filename
  local output_file="$output_dir/geoapify_map_${zoom}_${center_lat}_${center_lng}_${width}x${height}.jpg"

  # Download map
  log_info 'Downloading map from GeoApify...'
  if curl -s -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:87.0) Gecko/20100101 Firefox/87.0' "$url" -o "$output_file"; then
    log_success 'GeoApify map saved: <u>%s</u>' "$output_file"
  else
    log_error 'Failed to download map from GeoApify'
    return 1
  fi
}

# Function to parse command line arguments
parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case $1 in
    -p | --provider)
      provider="$2"
      if [[ "$provider" != "geoapify" && "$provider" != "osm" ]]; then
        log_error 'Invalid provider: %s. Must be <b>geoapify</b> or <b>osm</b>' "$provider"
        exit 1
      fi
      shift 2
      ;;
    -z | --zoom)
      zoom="$2"
      if ! [[ "$zoom" =~ ^[0-9]+$ ]] || [[ "$zoom" -lt 0 ]] || [[ "$zoom" -gt 20 ]]; then
        log_error 'Invalid zoom level: %s. Must be between 0 and 20' "$zoom"
        exit 1
      fi
      shift 2
      ;;
    -t | --type)
      map_type="$2"
      if [[ "$map_type" != "standard" && "$map_type" != "cycle" ]]; then
        log_error 'Invalid map type: %s. Must be <b>standard</b> or <b>cycle</b>' "$map_type"
        exit 1
      fi
      shift 2
      ;;
    -o | --output)
      output_dir="$2"
      shift 2
      ;;
    -w | --width)
      width="$2"
      if ! [[ "$width" =~ ^[0-9]+$ ]] || [[ "$width" -lt 1 ]]; then
        log_error 'Invalid width: %s. Must be a positive integer' "$width"
        exit 1
      fi
      shift 2
      ;;
    --height)
      height="$2"
      if ! [[ "$height" =~ ^[0-9]+$ ]] || [[ "$height" -lt 1 ]]; then
        log_error 'Invalid height: %s. Must be a positive integer' "$height"
        exit 1
      fi
      shift 2
      ;;
    -k | --api-key)
      api_key="$2"
      shift 2
      ;;
    -c | --center)
      IFS=',' read -r center_lat center_lng <<<"$2"
      shift 2
      ;;
    -b | --bounds)
      IFS=',' read -r geo_long_w geo_lat_s geo_long_e geo_lat_n <<<"$2"
      shift 2
      ;;
    -m | --markers)
      markers="$2"
      shift 2
      ;;
    -v | --verbose)
      verbose=1
      shift
      ;;
    -d | --debug)
      DEBUG=1
      shift
      ;;
    -h | --help)
      show_usage
      ;;
    -*)
      log_error 'Unknown option: %s' "$1"
      show_usage
      ;;
    *)
      log_error 'Unexpected argument: %s' "$1"
      show_usage
      ;;
    esac
  done
}

map_main() {
  log_title 'Map Downloader'

  # Parse arguments
  parse_arguments "$@"

  # Set default provider if not specified
  if [[ -z "$provider" ]]; then
    provider="$DEFAULT_PROVIDER"
  fi

  # Check dependencies
  check_dependencies curl bc imagemagick

  # Create output directory
  create_output_dir

  # Validate inputs based on provider
  if [[ "$provider" == "osm" ]]; then
    if [[ -z "$geo_long_w" || -z "$geo_lat_s" || -z "$geo_long_e" || -z "$geo_lat_n" ]]; then
      log_error 'Bounding box coordinates are required for OSM provider. Use <code>--bounds W,S,E,N</code> to specify coordinates.'
      show_usage
    fi

    if ! validate_bounding_box "$geo_long_w" "$geo_lat_s" "$geo_long_e" "$geo_lat_n"; then
      exit 1
    fi

    download_osm_map
  elif [[ "$provider" == "geoapify" ]]; then
    if [[ -z "$api_key" ]]; then
      log_error 'API key is required for GeoApify provider. Use <code>--api-key YOUR_KEY</code> to specify API key.'
      show_usage
    fi

    if [[ -z "$center_lat" || -z "$center_lng" ]]; then
      log_error 'Center coordinates are required for GeoApify provider.'
      log_error 'Use --center LAT,LNG to specify coordinates.'
      show_usage
    fi

    download_geoapify_map
  fi
}

# Run main function
main "$@"
