#!/usr/bin/env bash

# Map downloader for GeoApify and OpenStreetMap
# Usage: ./map-download [OPTIONS]

set -euo pipefail

# Main function wrapper
main() {
  # Check if common-functions exists
  if [[ ! -f "$(dirname "$0")/common-functions" ]]; then
    echo "Downloading common-functions from GitHub..."
    if ! curl -fsSL https://raw.githubusercontent.com/Flower7C3/bash-tools/master/common-functions -o "$(dirname "$0")/common-functions"; then
      echo "Failed to download common-functions"
      exit 1
    fi
  fi

  # Source common functions
  source "$(dirname "$0")/common-functions"

  # Call the actual main function
  map_main "$@"
}

map_main() {
  # Function to display usage
  function show_usage() {
    log_usage_title '[OPTIONS]'
    echo
    echo 'Download maps from GeoApify or OpenStreetMap'
    echo
    log_header 'Options'
    log_usage_options_line '-o;--output <DIR>' \
      'Output directory (default: <u>%s</u>)' "$DEFAULT_OUTPUT_DIR"
    log_usage_options_line '-v;--verbose' \
      'Verbose output'
    log_usage_options_line '-d;--debug' \
      'Debug output'
    log_usage_options_line '-u;--update' \
      'Update app'
    log_usage_options_line '-h;--help' \
      'Show this help message'
    log_header 'Map options'
    log_usage_options_line '-p;--provider <PROVIDER>' \
      'Map provider: <code>geoapify</code>, <code>osm</code> (default: <code>%s</code>)' "$DEFAULT_PROVIDER"
    log_usage_options_line '-z;--zoom <ZOOM>' \
      'Map zoom level (default: %s)' "$DEFAULT_ZOOM"
    log_header 'GeoApify options'
    log_usage_options_line '-k;--api-key <KEY>' \
      'API key'
    log_usage_options_line '-w;--width <WIDTH>' \
      'Image width (default: %s)' "$DEFAULT_WIDTH"
    log_usage_options_line '--height <HEIGHT>' \
      'Image height (default: %s)' "$DEFAULT_HEIGHT"
    log_usage_options_line '-c;--center <LAT>,<LNG>' \
      'Center coordinates'
    log_usage_options_line '-m;--markers <MARKERS>' \
      'Marker definitions, eg: <code>lonlat:20.0000,50.0326;type:circle;color:red</code>'
    log_header 'OSM options'
    log_usage_options_line '-b;--bounds <W>,<S>,<E>,<N>' \
      "Bounding box coordinates"
    log_usage_options_line '-t;--type <TYPE>' \
      'Map type: <code>standard</code>, <code>cycle</code> (default: <code>%s</code>)' "$DEFAULT_MAP_TYPE"
    echo
    log_header 'Examples'
    echo ' OSM map with bounding box'
    log_usage_example_line '--provider osm --bounds "20.2008,49.9817,20.4651,50.0836" --zoom 15'
    echo ' GeoApify map with center point'
    log_usage_example_line '--provider geoapify --center "50.0326,20.0000" --zoom 15 --api-key YOUR_KEY'
    echo ' GeoApify map with markers'
    log_usage_example_line '--provider geoapify --center "50.0326,20.0000" --markers "lonlat:20.0000,50.0326;type:circle;color:red" --api-key YOUR_KEY'
    echo ' OSM cycle map'
    log_usage_example_line '--provider osm --type cycle --bounds "20.2008,49.9817,20.4651,50.0836"'
    exit 0
  }

  # Default values
  DEFAULT_PROVIDER="osm"
  DEFAULT_ZOOM=15
  DEFAULT_MAP_TYPE="standard"
  DEFAULT_OUTPUT_DIR="${HOME}/Pictures"
  DEFAULT_WIDTH=800
  DEFAULT_HEIGHT=600

  # Global variables
  PROVIDER=""
  ZOOM=$DEFAULT_ZOOM
  MAP_TYPE=$DEFAULT_MAP_TYPE
  OUTPUT_DIR=$DEFAULT_OUTPUT_DIR
  WIDTH=$DEFAULT_WIDTH
  HEIGHT=$DEFAULT_HEIGHT
  GEO_LONG_W=""
  GEO_LAT_S=""
  GEO_LONG_E=""
  GEO_LAT_N=""
  CENTER_LAT=""
  CENTER_LNG=""
  API_KEY=""
  MARKERS=""
  VERBOSE=0
  DEBUG=0

  # Function to validate coordinates
  validate_coordinates() {
    local _lat="$1"
    local _lng="$2"

    if ! [[ "$_lat" =~ ^-?[0-9]+\.?[0-9]*$ ]] || ! [[ "$_lng" =~ ^-?[0-9]+\.?[0-9]*$ ]]; then
      log_error 'Invalid coordinate format: %s, %s' "$_lat" "$_lng"
      return 1
    fi

    if (($(echo "$_lat < -90 || $_lat > 90" | bc -l))); then
      log_error 'Latitude must be between -90 and 90: %s' "$_lat"
      return 1
    fi

    if (($(echo "$_lng < -180 || $_lng > 180" | bc -l))); then
      log_error 'Longitude must be between -180 and 180: %s' "$_lng"
      return 1
    fi

    return 0
  }

  # Function to validate bounding box
  validate_bounding_box() {
    local _w="$1"
    local _s="$2"
    local _e="$3"
    local _n="$4"

    if ! validate_coordinates "$_s" "$_w" || ! validate_coordinates "$_n" "$_e"; then
      return 1
    fi

    if (($(echo "$_w >= $_e" | bc -l))); then
      log_error 'West coordinate must be less than East coordinate'
      return 1
    fi

    if (($(echo "$_s >= $_n" | bc -l))); then
      log_error 'South coordinate must be less than North coordinate'
      return 1
    fi

    return 0
  }

  # Function to create output directory
  create_output_dir() {
    if [[ ! -d "$OUTPUT_DIR" ]]; then
      log_info 'Creating output directory: <u>%s</u>' "$OUTPUT_DIR"
      mkdir -p "$OUTPUT_DIR"
    fi
  }

  # Function to download OSM map
  download_osm_map() {
    if [[ -z "$GEO_LONG_W" || -z "$GEO_LAT_S" || -z "$GEO_LONG_E" || -z "$GEO_LAT_N" ]]; then
      log_error 'Bounding box coordinates are required for OSM provider. Use <code>--bounds W,S,E,N</code> to specify coordinates.'
      return 1
    fi

    if ! validate_bounding_box "$GEO_LONG_W" "$GEO_LAT_S" "$GEO_LONG_E" "$GEO_LAT_N"; then
      return 1
    fi

    log_info 'Downloading OSM map...'

    # Convert coordinates to tile coordinates
    local _xtile_min _xtile_max _ytile_min _ytile_max

    # Replace comma with dot for bc calculations
    local _geo_long_w_bc="${GEO_LONG_W//,/.}"
    local _geo_lat_s_bc="${GEO_LAT_S//,/.}"
    local _geo_long_e_bc="${GEO_LONG_E//,/.}"
    local _geo_lat_n_bc="${GEO_LAT_N//,/.}"

    # Calculate tile coordinates
    xtile_min=$(echo "scale=0; (($_geo_long_w_bc + 180) / 360 * 2^$ZOOM)" | bc)
    xtile_max=$(echo "scale=0; (($_geo_long_e_bc + 180) / 360 * 2^$ZOOM)" | bc)
    ytile_min=$(echo "scale=0; ((1 - log(tan($_geo_lat_n_bc * pi() / 180) + 1 / cos($_geo_lat_n_bc * pi() / 180)) / pi()) / 2 * 2^$ZOOM)" | bc -l)
    ytile_max=$(echo "scale=0; ((1 - log(tan($_geo_lat_s_bc * pi() / 180) + 1 / cos($_geo_lat_s_bc * pi() / 180)) / pi()) / 2 * 2^$ZOOM)" | bc -l)

    log_debug 'Tile coordinates: x=%s-%s, y=%s-%s' "$xtile_min" "$xtile_max" "$ytile_min" "$ytile_max"

    # Calculate tile amounts
    local _xtile_amount=$((_xtile_max - _xtile_min + 1))
    local _ytile_amount=$((_ytile_max - _ytile_min + 1))
    local _tile_amount=$((_xtile_amount * _ytile_amount))

    log_info 'Downloading %s tiles...' "$_tile_amount"

    # Create temporary directory
    local _temp_dir="/tmp/map_download_$$"
    mkdir -p "$_temp_dir"

    # Download tiles
    local _tile_index=0
    for ((xtile = xtile_min; xtile <= xtile_max; xtile++)); do
      for ((ytile = ytile_min; ytile <= ytile_max; ytile++)); do
        local _url
        local _tile_file="$_temp_dir/tile_${xtile}_${ytile}.png"

        case "$MAP_TYPE" in
        "standard")
          _url="http://a.tile.openstreetmap.org/$ZOOM/$xtile/$ytile.png"
          ;;
        "cycle")
          _url="http://a.tile.opencyclemap.org/cycle/$ZOOM/$xtile/$ytile.png"
          ;;
        *)
          log_error 'Unsupported map type: %s' "$MAP_TYPE"
          return 1
          ;;
        esac

        local _progress=$((100 * _tile_index / _tile_amount))
        if [[ "$VERBOSE" == "1" ]]; then
          log_info 'Downloading tile %s/%s (%s%%) - %s' "$((_tile_index + 1))" "$_tile_amount" "$_progress" "$_url"
        else
          log_info ---reset 'Downloading tiles: %d/%d (%d%%)' $((_tile_index + 1)) "$_tile_amount" "$_progress"
        fi

        if ! curl -s "$_url" -o "$_tile_file"; then
          log_warning 'Failed to download tile: %s' "$_url"
        fi

        ((_tile_index++))
      done
    done

    if [[ "$VERBOSE" != "1" ]]; then
      echo # New line after progress indicator
    fi

    # Create final map
    local output_file="$OUTPUT_DIR/osm_map_${ZOOM}_${GEO_LONG_W//,/_}_${GEO_LAT_S//,/_}_${GEO_LONG_E//,/_}_${GEO_LAT_N//,/_}_${MAP_TYPE}.png"

    log_info 'Creating final map: %s' "$output_file"

    # Combine tiles using ImageMagick
    local temp_files=()
    for ((xtile = xtile_min; xtile <= xtile_max; xtile++)); do
      local row_file="$_temp_dir/row_${xtile}.png"
      local row_files=()

      for ((ytile = ytile_min; ytile <= ytile_max; ytile++)); do
        local tile_file="$_temp_dir/tile_${xtile}_${ytile}.png"
        if [[ -f "$tile_file" ]]; then
          row_files+=("$tile_file")
        fi
      done

      if [[ ${#row_files[@]} -gt 0 ]]; then
        magick "${row_files[@]}" +append "$row_file"
        temp_files+=("$row_file")
      fi
    done

    if [[ ${#temp_files[@]} -gt 0 ]]; then
      magick "${temp_files[@]}" -append "$output_file"
      log_success 'OSM map saved' ---status "$output_file"
    else
      log_error 'No tiles were successfully downloaded'
      return 1
    fi

    # Cleanup
    rm -rf "$_temp_dir"
  }

  # Function to download GeoApify map
  download_geoapify_map() {
    log_info 'Downloading GeoApify map...'

    if [[ -z "$API_KEY" ]]; then
      log_error 'API key is required for GeoApify'
      return 1
    fi

    if [[ -z "$CENTER_LAT" || -z "$CENTER_LNG" ]]; then
      log_error 'Center coordinates are required for GeoApify'
      return 1
    fi

    # Validate coordinates
    if ! validate_coordinates "$CENTER_LAT" "$CENTER_LNG"; then
      return 1
    fi

    # Create markers parameter
    local _markers_param=""
    if [[ -n "$MARKERS" ]]; then
      _markers_param="&marker=$(printf '%s' "$MARKERS" | sed 's/#/%23/g')"
    fi

    # Build URL
    local _url="https://maps.geoapify.com/v1/staticmap?style=osm-carto&center=lonlat:${CENTER_LNG},${CENTER_LAT}&zoom=${ZOOM}&width=${WIDTH}&height=${HEIGHT}&apiKey=${API_KEY}${_markers_param}"

    log_debug 'GeoApify URL: <u>%s</u>' "$_url"

    # Create output filename
    local _output_file="$OUTPUT_DIR/geoapify_map_${ZOOM}_${CENTER_LAT}_${CENTER_LNG}_${WIDTH}x${HEIGHT}.jpg"

    # Download map
    log_info 'Downloading map from GeoApify...'
    if curl -s -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:87.0) Gecko/20100101 Firefox/87.0' "$_url" -o "$_output_file"; then
      log_success 'GeoApify map saved: <u>%s</u>' "$_output_file"
    else
      log_error 'Failed to download map from GeoApify'
      return 1
    fi
  }

  # Function to parse command line arguments
  parse_arguments() {
    while [[ $# -gt 0 ]]; do
      case "$1" in
      -p | --provider)
        PROVIDER="$2"
        if [[ "$PROVIDER" != "geoapify" && "$PROVIDER" != "osm" ]]; then
          log_error 'Invalid provider: %s. Must be <b>geoapify</b> or <b>osm</b>' "$PROVIDER"
          exit 1
        fi
        shift 2
        ;;
      -z | --zoom)
        ZOOM="$2"
        if ! [[ "$ZOOM" =~ ^[0-9]+$ ]] || [[ "$ZOOM" -lt 0 ]] || [[ "$ZOOM" -gt 20 ]]; then
          log_error 'Invalid zoom level: %s. Must be between 0 and 20' "$ZOOM"
          exit 1
        fi
        shift 2
        ;;
      -t | --type)
        MAP_TYPE="$2"
        if [[ "$MAP_TYPE" != "standard" && "$MAP_TYPE" != "cycle" ]]; then
          log_error 'Invalid map type: %s. Must be <b>standard</b> or <b>cycle</b>' "$MAP_TYPE"
          exit 1
        fi
        shift 2
        ;;
      -o | --output)
        OUTPUT_DIR="$2"
        shift 2
        ;;
      -w | --width)
        WIDTH="$2"
        if ! [[ "$WIDTH" =~ ^[0-9]+$ ]] || [[ "$WIDTH" -lt 1 ]]; then
          log_error 'Invalid width: %s. Must be a positive integer' "$WIDTH"
          exit 1
        fi
        shift 2
        ;;
      --height)
        HEIGHT="$2"
        if ! [[ "$HEIGHT" =~ ^[0-9]+$ ]] || [[ "$HEIGHT" -lt 1 ]]; then
          log_error 'Invalid height: %s. Must be a positive integer' "$HEIGHT"
          exit 1
        fi
        shift 2
        ;;
      -k | --api-key)
        API_KEY="$2"
        shift 2
        ;;
      -c | --center)
        IFS=',' read -r CENTER_LAT CENTER_LNG <<<"$2"
        shift 2
        ;;
      -b | --bounds)
        IFS=',' read -r GEO_LONG_W GEO_LAT_S GEO_LONG_E GEO_LAT_N <<<"$2"
        shift 2
        ;;
      -m | --markers)
        MARKERS="$2"
        shift 2
        ;;
      -v | --verbose)
        VERBOSE=1
        shift
        ;;
      -d | --debug)
        DEBUG=1
        shift
        ;;
      -h | --help)
        show_usage
        ;;
      -*)
        log_error 'Unknown option: <b>%s</b>' "$1"
        echo
        show_usage
        ;;
      *)
        log_error 'Unexpected argument: <b>%s</b>' "$1"
        echo
        show_usage
        ;;
      esac
    done
  }

  log_title 'Map Downloader'

  # Parse arguments
  parse_arguments "$@"

  # Set default provider if not specified
  if [[ -z "$PROVIDER" ]]; then
    PROVIDER="$DEFAULT_PROVIDER"
  fi

  # Check dependencies
  check_dependencies curl bc magick

  # Create output directory
  create_output_dir

  # Validate inputs based on provider
  if [[ "$PROVIDER" == "osm" ]]; then
    if ! download_osm_map; then
      echo
      show_usage
    fi
  elif [[ "$PROVIDER" == "geoapify" ]]; then
    if ! download_geoapify_map; then
      echo
      show_usage
    fi
  fi
}

# Run main function
main "$@"
