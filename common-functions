#!/usr/bin/env bash

# Common functions for bash tools based on Google Shell Style Guide

##----Check bash version------------------------------------------------------------------------------------------------------------

if [[ "$BASH_VERSION" == 0* ]] || [[ "$BASH_VERSION" == 1* ]] || [[ "$BASH_VERSION" == 2* ]] || [[ "$BASH_VERSION" == 3* ]]; then
  echo "Bash version is too low. Consider upgrading to bash newer than $BASH_VERSION"
  if uname | grep -iq Darwin; then
    echo "Read more on https://itnext.io/upgrading-bash-on-macos-7138bd1066ba"
  fi
  exit 9
fi

# Set terminal type for proper color support
export TERM=xterm-256color
shopt -s extglob

##----Formatting------------------------------------------------------------------------------------------------------------

styler() {
  case "$1" in
  font | text | FONT | TEXT)
    case "$2" in
    black | BLACK) tput setaf 0 ;;
    red | RED) tput setaf 1 ;;
    green | GREEN) tput setaf 2 ;;
    yellow | YELLOW) tput setaf 3 ;;
    blue | BLUE) tput setaf 4 ;;
    purple | PURPLE) tput setaf 5 ;;
    cyan | CYAN) tput setaf 6 ;;
    white | WHITE) tput setaf 7 ;;
    *) tput setaf 9 ;;
    esac
    ;;
  bg | background | BG | BACKGROUND)
    case "$2" in
    reset | REST) tput sgr0 ;;
    black | BLACK) tput setab 0 ;;
    red | RED) tput setab 1 ;;
    green | GREEN) tput setab 2 ;;
    yellow | YELLOW) tput setab 3 ;;
    blue | BLUE) tput setab 4 ;;
    purple | PURPLE) tput setab 5 ;;
    cyan | CYAN) tput setab 6 ;;
    white | WHITE) tput setab 7 ;;
    *) tput setab 9 ;;
    esac
    ;;
  bold | BOLD) tput bold ;;
  reset | REST) tput sgr0 ;;
  esac
}

# Icons
readonly ICON_INFO='☞'
readonly ICON_SUCCESS='✓'
readonly ICON_WARNING='‼'
readonly ICON_ERROR='✗'
readonly ICON_DEBUG=''
readonly ICON_PROMPT='↳'

readonly LOADING_ANIMATION=("⠇" "⠋" "⠙" "⠸" "⠴" "⠦")
readonly LOADING_ANIMATION_FRAME_INTERVAL=0.15

##----Display line------------------------------------------------------------------------------------------------------------

log_message() {
  function _text_format() {
    local _color_value="$1"
    shift
    local _pattern="$1"
    shift
    local _text
    # shellcheck disable=SC2059
    _text=$(printf -- "$_pattern" "$@")
    _text=${_text//<b>/$(styler bold)${_color_value}}
    _text=${_text//<\/b>/$(styler reset)${_color_value}}
    _text=${_text//<u>/$(tput smul)${_color_value}}
    _text=${_text//<\/u>/$(tput rmul)${_color_value}}
    _text=${_text//<code>/$(styler bg "CYAN")$(styler text "BLACK")}
    _text=${_text//<\/code>/$(styler reset)${_color_value}}
    echo -e "$_text"
  }
  local _color_value=""
  local _icon=""
  local _line_prepend=""
  local _line_append="\n"
  local _text
  local _status=""
  while [[ "${1:-}" != "" ]]; do
    case ${1} in
    -c | --color)
      shift
      _color_value="$(styler text "$1")"
      ;;
    -i | --icon)
      shift
      _icon="$1"
      ;;
    -p | --prepend)
      shift
      _line_prepend="$_line_prepend$1"
      ;;
    -b | --bell)
      _line_prepend="$_line_prepend\a"
      ;;
    -r | --reset)
      _line_prepend="\r$_line_prepend"
      ;;
    -o | --one-line)
      _line_append=""
      ;;
    -s | --status)
      shift
      _status="$1"
      ;;
    *) break ;;
    esac
    shift
  done
  # shellcheck disable=SC2059
  _text="$(_text_format "$_color_value" "$@")"
  if [[ -n "$_icon" ]]; then
    _text="$(_text_format "$_color_value" " <b>%s</b> %s" "$_icon" "$_text")"
  fi
  if [[ -n "$_status" ]]; then
    local _raw_bytes
    _raw_bytes="$(echo -n "${_text//$'\e'[\[(]*([0-9;])[@-n]/}" | wc -c | tr -d ' ')"
    local _text_bytes
    _text_bytes="$(echo -n "$_text" | wc -c | tr -d ' ')"
    local _text_chars
    _text_chars="$(echo -n "$_text" | wc -m | tr -d ' ')"
    local _padding=$((64 + (_text_bytes - _text_chars) + (_text_bytes - _raw_bytes)))
    _text="$(_text_format "$_color_value" "%-*s [<b>%s</b>]" "$_padding" "$_text" "$_status")"
  fi
  echo -e -n "${_line_prepend}${_color_value}${_text}${_line_append}$(styler reset)"
}

prepare_log_message() {
  local _color="$1"
  shift
  local _icon="$1"
  shift
  while [[ "${1:-}" != "" ]]; do
    case ${1} in
    -c | --color)
      shift
      _color="$1"
      ;;
    -i | --icon)
      shift
      _icon="$1"
      ;;
    *) break ;;
    esac
    shift
  done
  log_message --color "$_color" --icon "$_icon" "$@"
}

log_info() {
  prepare_log_message "CYAN" "$ICON_INFO" "$@"
}

log_success() {
  prepare_log_message "GREEN" "$ICON_SUCCESS" "$@"
}

log_warning() {
  prepare_log_message "BLUE" "$ICON_WARNING" "$@"
}

log_error() {
  prepare_log_message "RED" "$ICON_ERROR" "$@"
}

log_debug() {
  if [[ "${DEBUG:-0}" == "1" || "${debug:-0}" == "1" ]]; then
    prepare_log_message "PURPLE" "$ICON_DEBUG" "$@"
  fi
}

log_title() {
  local _title="$1"
  local _version="${2:-}"
  local _title_text
  if [[ -n "$_version" ]]; then
    _title_text="${_title} v${_version}"
  else
    _title_text="${_title}"
  fi

  # Calculate padding to center the title
  local _title_length=${#_title_text}
  local _total_width=64
  if [[ "$_title_length" -gt "$_total_width" ]]; then
    _total_width=$((_title_length + 4))
  fi
  if [[ $((_title_length % 2)) -eq 1 ]]; then
    _total_width="$((_total_width - 1))"
  fi
  local _padding=$(((_total_width - _title_length) / 2))

  log_message --color "WHITE" "<b>╔%s╗</b>" "$(printf "═%.0s" $(seq 1 1 $_total_width))"
  log_message --color "WHITE" "<b>║%*s$(styler text "YELLOW")%s%*s$(styler text "WHITE")║</b>" $_padding "" "$_title_text" $_padding ""
  log_message --color "WHITE" "<b>╚%s╝</b>" "$(printf "═%.0s" $(seq 1 1 $_total_width))"
}

log_header() {
  log_message --color "PURPLE" "<b>%s</b>" "$1"
}

log_usage_line() {
  log_message --color "PURPLE" "<b>Usage</b> <code>$*</code>"
}

log_usage_options_line() {
  local description="$1"
  shift
  local parameters
  parameters="$(printf "%s, " "$@")"
  log_message "  <b>%-*s</b> %s" "30" "${parameters::-2}" "$description"
}

log_usage_example_line() {
  log_message --color "CYAN" --icon " \$" "<code>%s</code>" "$@"
}

# Die with error message
die() {
  log_error "$@"
  exit 1
}

##----Loading animation------------------------------------------------------------------------------------------------------------

play_loading_animation_loop() {
  while [ $# -gt 0 ]; do
    case $1 in
    -t | --time)
      shift
      loading_animation_timer="$1"
      ;;
    -m | --message)
      shift
      loading_animation_message="$1"
      ;;
    esac
    shift
  done
  (
    _step=0
    while true; do
      for _frame in "${LOADING_ANIMATION[@]}"; do
        if [[ "$loading_animation_message" != "" ]]; then
          log_message --color "CYAN" --one-line --icon "$_frame" "$loading_animation_message"
          sleep "$LOADING_ANIMATION_FRAME_INTERVAL"
        else
          log_message --color "CYAN" --one-line "waiting %s" "$(echo "$loading_animation_timer - $_step" | bc -z)"
          sleep "1"
        fi
        _step="$((_step + 1))"
        printf "\r"
      done
    done
  ) &
  loading_animation_pid=$!
}

kill_loading_animation_loop() {
  if [[ -n "${loading_animation_pid:-}" ]]; then
    kill "$loading_animation_pid" &>/dev/null
    printf "\r%100s\r$(styler reset)" ""
    code=0
    status=""
    while [ $# -gt 0 ]; do
      case $1 in
      -c | --code)
        shift
        code="$1"
        ;;
      -s | --status)
        shift
        status="$1"
        ;;
      -m | --message)
        shift
        loading_animation_message="$1"
        ;;
      esac
      shift
    done
    if [[ "$loading_animation_message" != "" ]]; then
      if [[ "$code" -gt "0" ]]; then
        log_error --status "$status" "$loading_animation_message"
      elif [[ "$code" -lt "0" ]]; then
        log_warning --status "$status" "$loading_animation_message"
      else
        log_success --status "$status" "$loading_animation_message"
      fi
    fi
    loading_animation_pid=""
    loading_animation_message=""
    loading_animation_timer=""
  fi
}

wait_moment() {
  play_loading_animation_loop --time "$RETRY_INTERVAL"
  sleep "$RETRY_INTERVAL"
  kill_loading_animation_loop --code 0
}

trap "kill_loading_animation_loop;exit" SIGINT
trap "kill_loading_animation_loop;exit" EXIT

##----IO------------------------------------------------------------------------------------------------------------

prompt_input() {
  # prepare
  local _var_name="$1"
  shift
  local _prompt_text="$1"
  shift
  local _default_value="${1:-}"
  shift
  # options
  local _options
  _options="$(printf "<b>%s</b>," "$@")"
  local _message
  if [[ -n "$_options" ]]; then
    _message="$(log_message --color "YELLOW" --icon "$ICON_PROMPT" --one-line "%s [%s]: " "$_prompt_text" "${_options::-1}")"
  else
    _message="$(log_message --color "YELLOW" --icon "$ICON_PROMPT" --one-line "%s: " "$_prompt_text")"
  fi

  # get
  local _value
  read -r -p "$_message" -e -i "$_default_value" _value
  if [[ -z "$_value" ]]; then
    _value="$_default_value"
  fi

  # set
  eval "$_var_name=\"$_value\""
}

confirm_or_exit() {
  local _message="$1"
  local _default_value="${2:-}"
  local _response="z"

  while [[ ! "$_response" =~ ^[YyNn]?$ ]]; do
    prompt_input _response "$_message" "$_default_value" "Y" "y" "N" "n"
    [[ "$_response" =~ ^[Yy]?$ ]] && break
  done
}

##----Checking------------------------------------------------------------------------------------------------------------

# Check if command exists
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

check_dependencies() {
  local deps=("$@")
  local missing_deps=()

  for dep in "${deps[@]}"; do
    if ! command_exists "$dep"; then
      missing_deps+=("$dep")
    fi
  done

  if [[ ${#missing_deps[@]} -gt 0 ]]; then
    missing_items="$(printf "<b>%s</b>, " "${missing_deps[@]}")"
    die "Missing dependencies: %s. Please install them and try again." "${missing_items::-2}"
  fi
}

# Validate URL format
validate_url() {
  local url="$1"
  if [[ ! "$url" =~ ^https?:// ]]; then
    log_error "Invalid URL format: $url (must start with http:// or https://)"
    return 1
  fi
  return 0
}

# Validate domain format
validate_domain() {
  local domain="$1"
  if [[ -z "$domain" ]]; then
    log_error "Domain cannot be empty"
    return 1
  fi
  if [[ ! "$domain" =~ ^[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?)*$ ]]; then
    log_error "Invalid domain format: $domain"
    return 1
  fi
  return 0
}

# Validate WordPress directory
validate_wp_directory() {
  local wp_dir="$1"
  if [[ ! -d "$wp_dir" ]]; then
    log_error "WordPress directory <u>$wp_dir</u> does not exist"
    return 1
  fi
  if [[ ! -f "$wp_dir/wp-config.php" ]]; then
    log_error "Given directory <u>$wp_dir</u> is not a valid WordPress installation (wp-config.php not found)"
    return 1
  fi
  return 0
}

# Validate directory exists
validate_directory() {
  local dir="$1"
  if [[ ! -d "$dir" ]]; then
    log_error "Directory does not exist: $dir"
    return 1
  fi
  return 0
}

# Validate file exists
validate_file() {
  local file="$1"
  if [[ ! -f "$file" ]]; then
    log_error "File does not exist: $file"
    return 1
  fi
  return 0
}

# Validate positive number
validate_positive_number() {
  local num="$1"
  local name="${2:-number}"

  if ! [[ "$num" =~ ^[0-9]+(\.[0-9]+)?$ ]] || (($(echo "$num <= 0" | bc -l))); then
    log_error "$name must be a positive number"
    return 1
  fi
  return 0
}
